//============================================================
//
//	ブロック処理 [block.cpp]
//	Author：藤田勇一
//
//============================================================
//************************************************************
//	インクルードファイル
//************************************************************
#include "block.h"
#include "sceneGame.h"
#include "gameManager.h"
#include "gridManager.h"

//************************************************************
//	定数宣言
//************************************************************
namespace
{

}

//************************************************************
//	親クラス [CBlock] のメンバ関数
//************************************************************
//============================================================
//	コンストラクタ
//============================================================
CBlock::CBlock(const EType type) : CObject(CObject::LABEL_BLOCK, CObject::DIM_2D, 0),
	m_type		(type),			// 種類
	m_pos		(GRID2_ZERO),	// 原点位置
	m_fCurTime	(0.0f)			// 現在の待機時間
{

}

//============================================================
//	デストラクタ
//============================================================
CBlock::~CBlock()
{

}

//============================================================
//	初期化処理
//============================================================
HRESULT CBlock::Init(void)
{
	// メンバ変数を初期化
	m_pos = POSGRID2(4, 19);	// 原点位置
	m_fCurTime = 0.0f;			// 現在の待機時間

	// ブロック色の反映
	SetColBlock(m_pos, m_type);

	// 成功を返す
	return S_OK;
}

//============================================================
//	終了処理
//============================================================
void CBlock::Uninit(void)
{
	// オブジェクトを破棄
	Release();
}

//============================================================
//	更新処理
//============================================================
void CBlock::Update(const float fDeltaTime)
{
	// 一番下に到達している場合抜ける
	if (m_pos.y <= 0) { return; }

	// 待機時間を加算
	m_fCurTime += fDeltaTime;
	while (m_fCurTime >= 3.0f)
	{ // 待機し終わった場合

		// 現在の待機時間から減算
		m_fCurTime -= 3.0f;

		// 前回の位置を保存
		POSGRID2 posOld = m_pos;

		// 原点位置に重力を与える
		m_pos.y--;

		// ブロックを入れ替え
		SwapBlock(posOld, m_pos);
	}
}

//============================================================
//	描画処理
//============================================================
void CBlock::Draw(CShader * /*pShader*/)
{

}

//============================================================
//	生成処理
//============================================================
CBlock *CBlock::Create(const EType type)
{
	// ブロックの生成
	CBlock *pBlock = new CBlock(type);
	if (pBlock == nullptr)
	{ // 生成に失敗した場合

		return nullptr;
	}
	else
	{ // 生成に成功した場合

		// ブロックの初期化
		if (FAILED(pBlock->Init()))
		{ // 初期化に失敗した場合

			// ブロックの破棄
			SAFE_DELETE(pBlock);
			return nullptr;
		}

		// 確保したアドレスを返す
		return pBlock;
	}
}

//============================================================
//	ブロックの入替処理
//============================================================
void CBlock::SwapBlock(const POSGRID2& rOldPos, const POSGRID2& rCurPos)
{
	// 前回位置のブロック色の反映
	SetColBlock(rOldPos, TYPE_NONE);

	// 現在位置のブロック色の反映
	SetColBlock(rCurPos, m_type);
}

//============================================================
//	ブロック色の反映処理
//============================================================
void CBlock::SetColBlock(const POSGRID2& rPos, const EType type)
{
	CGridManager *pGrid = CSceneGame::GetGameManager()->GetGridManager();	// グリッド情報

	// ブロック色の反映
	pGrid->SetColBlock(rPos, type);
}
