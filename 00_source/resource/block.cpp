//============================================================
//
//	ブロック処理 [block.cpp]
//	Author：藤田勇一
//
//============================================================
//************************************************************
//	インクルードファイル
//************************************************************
#include "block.h"

//************************************************************
//	親クラス [CBlock] のメンバ関数
//************************************************************
//============================================================
//	コンストラクタ
//============================================================
CBlock::CBlock() :
	m_pParent	(nullptr),		// 自身の統括クラス
	m_pos		(GRID2_ZERO),	// 現在位置
	m_posOld	(GRID2_ZERO),	// 過去位置
	m_offset	(GRID2_ZERO)	// オフセット位置
{

}

//============================================================
//	デストラクタ
//============================================================
CBlock::~CBlock()
{

}

//============================================================
//	初期化処理
//============================================================
HRESULT CBlock::Init(void)
{
	// メンバ変数を初期化
	m_pParent	= nullptr;		// 自身の統括クラス
	m_pos		= GRID2_ZERO;	// 現在位置
	m_posOld	= GRID2_ZERO;	// 過去位置
	m_offset	= GRID2_ZERO;	// オフセット位置

	// 成功を返す
	return S_OK;
}

//============================================================
//	終了処理
//============================================================
void CBlock::Uninit(void)
{
	// 自身を破棄する
	delete this;
}

//============================================================
//	更新処理
//============================================================
void CBlock::Update(const float fDeltaTime)
{
	// 過去位置を更新
	m_posOld = m_pos;
}

//============================================================
//	生成処理
//============================================================
CBlock *CBlock::Create(CMultiBlock* pParent)
{
	// ブロックの生成
	CBlock *pBlock = new CBlock;
	if (pBlock == nullptr)
	{ // 生成に失敗した場合

		return nullptr;
	}
	else
	{ // 生成に成功した場合

		// ブロックの初期化
		if (FAILED(pBlock->Init()))
		{ // 初期化に失敗した場合

			// ブロックの破棄
			SAFE_DELETE(pBlock);
			return nullptr;
		}

		// 自身の統括クラスを保存
		pBlock->m_pParent = pParent;

		// 確保したアドレスを返す
		return pBlock;
	}
}
